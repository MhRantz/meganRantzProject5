{"version":3,"sources":["assets/tsunDoka.png","assets/tsunDoka2.png","Nav.js","Header.js","HowTo.js","BestSeller.js","BookDetails.js","YourStack.js","FinishedStack.js","extra.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","id","className","this","props","activeStatus","onClick","activeChange","stackSize","Component","Header","howTo","src","tsunDoka","alt","HowTo","BestSeller","tabIndex","isbn","bookImg","title","addToRead","descriptions","href","productURL","author","getDetails","BookDetails","url","description","backToBestSeller","tsunDoka2","YourStack","dbKey","readIt","unstack","FinishedStack","listNames","query","name","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","secondCall","keyword","axios","method","responseType","then","response","setState","subBooksList","data","results","books","book","dbRefToRead","database","ref","copyToRead","state","toRead","copyFinishedBooks","finishedBooks","find","push","child","remove","area","getDetail","detailedBook","dbRefFinished","console","log","key","currentActive","active","copyHow","how","bestSellers","whichStack","on","snapshot","val","updateFinishedBooks","updateToRead","length","map","primary_isbn13","book_image","amazon_product_url","list","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5f4fa177.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tsunDoka.c051595d.png\";","module.exports = __webpack_public_path__ + \"static/media/tsunDoka2.27115788.png\";","import React, { Component } from 'react';\n\nclass Nav extends Component {\n    render() {\n        return (\n            <nav>\n                <h1>Tsundoku.</h1>\n                <button id=\"scrollHere\" className={`is${this.props.activeStatus}`} onClick={this.props.activeChange}>\n                    <span>{this.props.stackSize}</span>\n                    <p>in your stack</p>\n                    <h5>Your Stack.</h5>\n                </button>\n            </nav>\n        )\n    }\n}\n\nexport default Nav;","import React, { Component } from 'react';\nimport tsunDoka from './assets/tsunDoka.png';\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"mainHeader\">\n                <div className=\"headerContent\">\n                    <h2>Manage your reading stack all in one place</h2>\n                    <button onClick={this.props.howTo}>Learn How.</button>\n                </div>\n                <div className=\"headerImg\">\n                    <img src={tsunDoka} alt=\"Line Drawing of a Japanese painting of a woman holding a book\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass HowTo extends Component {\n    render() {\n        return (\n            <div className=\"howTo\">\n                <h4>How To Get Started with Tsundoku</h4>\n                <p>Tsundoku means 'reading pile', and refers to the stack of books in your home that you have yet to read. With Tsundoku you can keep track of your reading stack easily.</p>\n                <ul>\n                    <li>Press Stack on a book you want to read below to add it to your reading stack</li>\n                    <li>Bring up other books lists in The Lists Section</li>\n                    <li>View books in your reading stack by pressing the number of books in your stack button</li>\n                    <li>Mark off books as read and view a full list of books you've read</li>\n                </ul>\n                <button onClick={this.props.howTo}>Back.</button>\n            </div>\n        )\n    }\n}\n\nexport default HowTo;","import React, { Component } from 'react';\n\nclass BestSeller extends Component {\n    render() {\n        return (\n            <li tabIndex=\"0\" id={this.props.isbn} className=\"bestSellerBook\">\n                <div>\n                    <img src={this.props.bookImg} alt={`${this.props.title} cover art`} />\n                    <button className=\"stackButton\" onClick={this.props.addToRead}>Stack.</button>\n                </div>\n                <section>\n                    <p>{this.props.descriptions}</p>\n                    <a href={this.props.productURL}></a>\n                </section>\n                <h6>{this.props.title}</h6>\n                <span>{`by ${this.props.author}`}</span>\n                <button className=\"getDetails\" onClick={this.props.getDetails}>Details</button>\n            </li>//end of bestSellerBook\n        )\n    }\n}\n\nexport default BestSeller;","import React, { Component } from 'react';\nimport tsunDoka2 from './assets/tsunDoka2.png';\n\nclass BookDetails extends Component {\n    render() {\n        return (\n            <div className=\"bookDetailParent\">\n                <div className=\"bookDetailContents bestSellerBook\">\n                    <div>\n                        <img src={this.props.url} alt={`${this.props.title} cover art`} />\n                        <button className=\"stackButton\" onClick={this.props.addToRead}>Stack.</button>\n                    </div>\n                    <div>\n                        <h4>{this.props.title}</h4>\n                        <span>{this.props.author}</span>\n                        <p>{this.props.description}</p>\n                        <button onClick={this.props.backToBestSeller}>Back.</button>\n                    </div>\n                    \n                </div>\n                <img className=\"tSun\" src={tsunDoka2} alt=\"Line Drawing of a Japanese painting of a woman holding a book\" /> \n            </div>\n        )\n    }\n}\n\nexport default BookDetails;","import React, { Component } from 'react';\n\nclass YourStack extends Component {\n    render() {\n        return (\n            <div id={this.props.dbKey} className=\"yourStackBook\">\n                <div className=\"cover\">\n                    <img src={this.props.bookImg} alt={`${this.props.title} cover art`} />\n                </div>\n                <div className=\"details\">\n                    <h6>{this.props.title}</h6>\n                    <span>{`by ${this.props.author}`}</span>\n                    <button onClick={this.props.readIt}>Read</button>\n                    <button onClick={this.props.unstack}>Remove</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default YourStack;","import React, { Component } from 'react';\n\nclass FinishedStack extends Component {\n    render() {\n        return (\n            <div id={this.props.dbKey} className=\"yourStackBook\">\n                <div className=\"cover\">\n                    <img src={this.props.bookImg} alt={`${this.props.title} cover art`} />\n                </div>\n                <div className=\"details\">\n                    <h6>{this.props.title}</h6>\n                    <span>{`by ${this.props.author}`}</span>\n                    <span>Finished</span>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FinishedStack;","const listNames = [\n    {query:\"hardcover-nonfiction\", name:\"Non-Fiction\"},\n    {query:\"young-adult\", name:\"Young Adult\"},\n    {query:\"hardcover-graphic-books\", name:\"Graphic Novels\"},\n    {query:\"food-and-fitness\", name:\"Food and Fitness\"},\n    {query:\"travel\", name: \"Travel\"},\n    {query:\"education\", name:\"Education\"},\n    {query:\"science\", name:\"Science\"}\n]; \nexport default listNames;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyARE04_FaCOjqkdOxfLefMbbgIAG2Jg-dI\",\n    authDomain: \"tsundoku-stack.firebaseapp.com\",\n    databaseURL: \"https://tsundoku-stack.firebaseio.com\",\n    projectId: \"tsundoku-stack\",\n    storageBucket: \"tsundoku-stack.appspot.com\",\n    messagingSenderId: \"308210051228\",\n    appId: \"1:308210051228:web:738aa55ef2dd85b5f56559\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport Nav from './Nav';\nimport Header from './Header';\nimport HowTo from './HowTo';\nimport BestSeller from './BestSeller';\nimport BookDetails from './BookDetails';\nimport YourStack from './YourStack';\nimport FinishedStack from './FinishedStack';\nimport listNames from './extra.js';\nimport axios from 'axios';\nimport firebase from './firebase';\nimport './App.scss';\n\n\nclass App extends Component {\n  /////////////////////////////////////////////////////////////////////\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//\n  //THE STATE\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//\n  /////////////////////////////////////////////////////////////////////\n  constructor() {\n    super();\n    this.state = {\n      bestSellers: [],\n      detailedBook: {},\n      getDetail: '',\n      subBooksList: [],\n      toRead: [],\n      finishedBooks: [],\n      active: false,\n      how: false,\n      whichStack: true\n    }\n  }\n  /////////////////////////////////////////////////////////////////////\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//\n  //THE FUNCTIONS\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//\n  /////////////////////////////////////////////////////////////////////\n\n  // Call API for NY times best sells and exchange data with firebase lists\n  componentDidMount() {\n    axios({\n      url: `https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=h1My3UlUBaurlTOmJjJ7RJPQJSDlH0lI`,\n      method: `GET`,\n      responseType: `json`,\n    })\n      .then((response) => {\n        this.setState({\n          bestSellers: response.data.results.books\n        })\n      });\n\n    //Firebase Set up For Books in FinishedBooks\n    const dbRefFinishedBooks = firebase.database().ref('finishedBooks');\n    dbRefFinishedBooks.on('value', (snapshot) => {\n      const data = snapshot.val();\n      const updateFinishedBooks = [];\n      for (let key in data) {\n        updateFinishedBooks.push({ key: key, data: data[key] })\n      }\n      this.setState({\n        finishedBooks: updateFinishedBooks\n      })\n    })\n\n    //Firebase Set up For Books in Your Stack\n    const dbRefToRead = firebase.database().ref('toRead');\n    dbRefToRead.on('value', (snapshot) => {\n      const data = snapshot.val();\n      const updateToRead = [];\n      for (let key in data) {\n        updateToRead.push({ key: key, data: data[key] })\n      }\n      this.setState({\n        toRead: updateToRead\n      })\n    })\n\n    this.secondCall(\"hardcover-nonfiction\");\n  }///////////END OF COMPONENT DID MOUNT\n\n  ///Second Api Call for the other lists from NY Times - button bank supplying keyword list name\n  secondCall = (keyword) => {\n    axios({\n      url: `https://api.nytimes.com/svc/books/v3/lists/${keyword}.json?api-key=h1My3UlUBaurlTOmJjJ7RJPQJSDlH0lI`,\n      method: `GET`,\n      responseType: `json`,\n    })\n      .then((response) => {\n        this.setState({\n          subBooksList: response.data.results.books\n        })\n      });\n  }\n\n  ///When Stack is pressed on book, add it to the database list of your stacked books to read\n  addToRead = (isbn, title, author, url) => {\n    const book = {\n      isbn: isbn,\n      title: title,\n      author: author,\n      url: url\n    }\n    const dbRefToRead = firebase.database().ref('toRead');\n    const copyToRead = this.state.toRead;\n    const copyFinishedBooks = this.state.finishedBooks;\n    //Looking to see if the Stacked book will be a duplicate in the array of books in stack, and only pushing if not found\n    let findBook = copyToRead.find(book => book.data.isbn === isbn)\n    if (!findBook) {\n      let findBookHere = copyFinishedBooks.find(book => book.data.isbn === isbn)\n      if (!findBookHere) {\n        dbRefToRead.push(book);\n      }\n    }\n  }\n\n  ///When Remove is pressed on a stacked book remove it from the database list of stacked books\n  unstack = (dbKey) => {\n    const dbRefToRead = firebase.database().ref('toRead');\n    dbRefToRead.child(dbKey).remove();\n  }\n\n  //Showing the details page with the book description for a selected book, \n  //setting the state with the details of the selected book since the event isn't on the whole object\n  getDetails = (title, author, url, description, area) => {\n    this.setState(\n      { getDetail: area }\n    )\n    this.setState(\n      {\n        detailedBook: {\n          title: title,\n          author: author,\n          url: url,\n          description: description\n        }\n      }\n    )\n  }\n\n  //Get back from details to main book lists\n  backToBestSeller = () => {\n    this.setState(\n      { getDetail: '' }\n    )\n  }\n\n  //On click of \"Read\" change status of the book from in stack to the finished books list\n  readIt = (isbn) => {\n    const copyToRead = this.state.toRead;\n    const copyFinishedBooks = [...this.state.finishedBooks];\n    const dbRefToRead = firebase.database().ref('toRead');\n    const dbRefFinished = firebase.database().ref('finishedBooks');\n    //finding the full book object in the current array, then pushing it to Finished Books, removing it from toRead on DB and pushing it to Finished\n    let book = copyToRead.find(book => book.data.isbn === isbn)\n    console.log(book);\n    dbRefFinished.push(book.data);\n    dbRefToRead.child(book.key).remove();\n\n    copyFinishedBooks.push(book);\n\n    this.setState(\n      { finishedBooks: copyFinishedBooks }\n    )\n  }\n\n  //changing the activation of the your stack window to control spacing on page\n  activeChange = () => {\n    const currentActive = this.state.active;\n    this.setState(\n      { active: !currentActive }\n    )\n  }\n\n  //Toggle from main header to the how to menu and back \n  howTo = () => {\n    const copyHow = this.state.how\n    this.setState(\n      { how: !copyHow }\n    )\n  }\n\n  /////////////////////////////////////////////////////////////////////\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//\n  //THE RENDER\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//\n  /////////////////////////////////////////////////////////////////////\n\n  render() {\n    return (\n      <div className=\"app\">\n\n        <Nav\n          activeStatus={this.state.active}\n          stackSize={`${this.state.toRead.length}.`}\n          activeChange={() => this.activeChange()}\n        />\n\n        <header>{//based on click of the learn more button/ back render main header or the how to window\n          this.state.how\n            ? <HowTo howTo={() => this.howTo()} />\n            : <Header howTo={() => this.howTo()} />\n        }</header>\n\n\n        <aside className={`is${this.state.active}`}>\n          <div className=\"whichStack\" >\n            <button onClick={() => this.setState({ whichStack: true })}>Stack</button>\n            <button onClick={() => this.setState({ whichStack: false })}>Finished</button>\n          </div>\n          {///based on button selection of either your book stack or your finished books map the corresponding list to the page\n            !this.state.whichStack\n              ? <ul className=\"yourStackParent\">\n                {/*Throw your already read/finished books stack onto the page if Div is opened and Finished button is pressed*/\n                  this.state.finishedBooks.map((book) => {\n                    return <FinishedStack\n                      key={book.key}\n                      bookImg={book.data.url}\n                      title={book.data.title}\n                      author={book.data.author}\n                    /> //End of Your Stack JSX\n                  })\n                }\n              </ul>\n              : this.state.toRead.length > 0\n\n                ? <ul className=\"yourStackParent\">\n                  {/*Throw your saved books stack onto the page if Div is opened*/\n                    this.state.toRead.map((book) => {\n                      return <YourStack\n                        key={book.key}\n                        bookImg={book.data.url}\n                        title={book.data.title}\n                        author={book.data.author}\n                        unstack={() => this.unstack(book.key)}\n                        readIt={() => this.readIt(book.data.isbn)}\n                      /> //End of Your Stack JSX\n                    })\n                  }</ul>\n                : <div className=\"stackEmpty\"><p>Your list is empty. Stack some books to read.</p></div>\n\n          }\n\n\n\n        </aside>\n\n        <main className={`is${this.state.active}`}>\n          <h3>Trending.</h3>\n          <ul className=\"bestSellers\">\n            {/*New Times Best Sellers Results from API call, mapping to show each book on grid*/\n              this.state.getDetail === 'bestseller'\n                ? <BookDetails\n                  url={this.state.detailedBook.url}\n                  title={this.state.detailedBook.title}\n                  author={this.state.detailedBook.author}\n                  description={this.state.detailedBook.description}\n                  backToBestSeller={() => this.backToBestSeller()}\n                />\n                : this.state.bestSellers.map((book) => {\n                  return <BestSeller\n                    key={book.primary_isbn13}\n                    bookImg={book.book_image}\n                    title={book.title}\n                    author={book.author}\n                    description={book.description}\n                    productURL={book.amazon_product_url}\n                    addToRead={() => this.addToRead(book.primary_isbn13, book.title, book.author, book.book_image)}\n                    getDetails={() => this.getDetails(book.title, book.author, book.book_image, book.description, 'bestseller')}\n                  /> //End of New York Times Best Sellers JSX\n                })\n            }\n          </ul>\n\n          <h3>The Lists.</h3>\n\n          <div className=\"subBookListNames\">\n            {\n              listNames.map((list, index) => {\n                return <button onClick={() => this.secondCall(list.query)} key={index}>{list.name}</button>\n              })\n            }\n          </div>\n\n          <ul className=\"bestSellers\">\n            {\n              this.state.getDetail === 'theLists'\n                ? <BookDetails\n                  url={this.state.detailedBook.url}\n                  title={this.state.detailedBook.title}\n                  author={this.state.detailedBook.author}\n                  description={this.state.detailedBook.description}\n                  backToBestSeller={() => this.backToBestSeller()}\n                />\n                : this.state.subBooksList.map((book) => {\n                  return <BestSeller\n                    key={book.primary_isbn13}\n                    bookImg={book.book_image}\n                    title={book.title}\n                    author={book.author}\n                    description={book.description}\n                    productURL={book.amazon_product_url}\n                    addToRead={() => this.addToRead(book.primary_isbn13, book.title, book.author, book.book_image)}\n                    getDetails={() => this.getDetails(book.title, book.author, book.book_image, book.description, 'theLists')}\n                  /> //End of New York Times Best Sellers JSX\n                })\n            }\n          </ul>\n\n          <p className=\"final\">Copyright 2020 Megan Rantz</p>\n        </main>\n\n        <button className=\"pageUp\"><a href=\"scrollHere\">Top.</a></button>\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}